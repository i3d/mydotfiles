" vim: filetype=vifm :
" Sample configuration file for vifm on OSX (last updated: 27 January, 2020)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

let $ZSH_ENV = '~/.zshrc'
let $VIFM_ENABLED = 1

" Selected color scheme
colorscheme dracula

" ------------------------------------------------------------------------------
" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
set dotfiles
set vicmd='vim -p'
set rnu
set scb
set quickview
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks


" hide side borders
set tuioptions-=s
if $TERM != 'linux'
    " use Unicode ellipsis
    set tuioptions+=u
endif
set fillchars=vborder:·

set syscalls
set trash
set trashdir=%r/.vifm-Trash,$HOME/.vifm/trash
set history=10000
set nofollowlinks
set fastrun
set sortnumbers
set undolevels=1000
set rulerformat='%2l-%S%[ +%x%]'
set vimhelp
set runexec
set title
set caseoptions=G
set fusehome=~/.vifm/.fuse
set findprg='find %s %a -print ,
            \ -type d \( ! -readable -o ! -executable -o -path "*/.git" \)
            \ -prune'
set grepprg='ag --line-numbers %i %a %s'

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt=%m/%d\ %H:%M
set wildmenu
set wildstyle=popup
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers
set ignorecase
set smartcase
set hlsearch
set incsearch
set scrolloff=4
set slowfs=curlftpfs
set tabstop=2
set dotdirs=
set wrap
set cpoptions-=fst

set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
if $VIFMRC_HAS_RICH_FONT
    let &statusline = ''
    if $SL_PREFIX != ''
        let &statusline = '%2*'.$SL_PREFIX.'%4*'
    endif
    let &statusline .= '%1*'           " left separator
    let &statusline .= ' %t '          " file name
    let &statusline .= ''             " left separator
    let &statusline .= '%='            " fill the whole status line
    let &statusline .= ''             " right separator
    let &statusline .= ' %A '          " file attributes
    let &statusline .= '%4*%2*'       " right separator
    let &statusline .= ' '.$RIGHTS.' ' " user and group owners of the file
    let &statusline .= '%3*%1*'       " right separator
    let &statusline .= ' %5E '         " human readable cumulative file size
    let &statusline .= '%4*%2*'       " right separator
    let &statusline .= ' %d '          " file modification date and time
else
    let &statusline = ' '
    if $SL_PREFIX != ''
        let &statusline .= $SL_PREFIX.'| '
    endif
    let &statusline .= '%t%= %A '.$RIGHTS.'%15E %20d '
endif

" ------------------------------------------------------------------------------
" use < and > without ctrl-w prefix key in normal mode
nnoremap < <c-w><
nnoremap > <c-w>>
nnoremap ; :
nnoremap jk <esc>
nnoremap s :shell<cr>
" Display sorting dialog
nnoremap S :sort<cr>
" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" open vim to edit .vifmrc
nnoremap ,c :write | execute ':!%n${EDITOR:-vim} $MYVIFMRC' | restart<cr>
" open gvim to edit .vifmrc
nnoremap ,C :!vi --remote-tab-silent $MYVIFMRC &<cr>

" Open file in new MacVim tab
""nnoremap o :!mvim --remote-tab-silent %f<cr>
" Open file in new MacVim window
""nnoremap O :!mvim %f<cr>

" Open file in the background using its default program
nnoremap gb :!open -g %f<cr>
" Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>
" Yank current file path into the clipboard
nnoremap yf :!printf %c:p | pbcopy<cr>
" View preview in Quick Look
"nnoremap <space> :!qlmanage -p %f > /dev/null 2>&1<cr>
nnoremap <space> :!open -a CotEditor.app %f > /dev/null 2>&1<cr>
" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>
" toggle wrap setting on ,w key
""nnoremap ,w :set invwrap<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" faster search of files that start with a particular string
nnoremap f/ /^
" substitute in all files
nnoremap as :%s/
" force file editing rather than opening it
nnoremap E :edit<cr>
" use space and shift-tab as tab in quick view mode
qnoremap <space> <tab>
qnoremap <s-tab> <tab>
nnoremap <tab> <s-tab>
" toggle between sorting: by name <--> by size <--> by mtime
command! togglesort
         \ :if &sort == '-size,+name'
         \ |    set sort=+mtime
         \ |    echo 'Sorted by modification date'
         \ |elseif &sort == '+name'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+name
         \ |    echo 'Sorted by name'
         \ |endif
nnoremap ,S :togglesort<cr>

" creates directory and immediately enters it
command! mkcd :mkdir %a | cd %a
command! mkcd! :mkdir! %a | cd %a
" run make in current directory
command! make !!make %a
" set target Vim server name
command! target : let $VIMARGS = '--servername "%a"'
               \| execute "!tmux %%i set-environment VIMARGS '".$VIMARGS."'"

" open file in existing instance of gvim (uses target)
if executable('run-gvim')
    " run-gvim can be a custom wrapper for gvim that does some extra work
    nnoremap <silent> o :    ![ -z "$(gvim --serverlist)" ] && run-gvim %f
                        \ || run-gvim --remote-tab-silent %f:p &<cr>
else
    nnoremap <silent> o :    ![ -z "$(gvim --serverlist)" ] && gvim $VIMARGS %f
                        \ || gvim $VIMARGS --remote-tab-silent %f:p &<cr>
endif
" open file in new instance of gvim
nnoremap O :!gvim %f &<cr>
" default set of view columns
set viewcolumns=*{name}..,6{}.

" brief information about files
nnoremap ,b :set viewcolumns=*{name}..,6{}.<cr>
" detailed information about files
nnoremap ,d :set viewcolumns=*{name}.,10{perms},12{uname},-7{gname},10{size}.,20{mtime}<cr>

" go to previous tab page or move current tab page to position specified by the
" count
nnoremap <silent> gT : <c-u>
                    \| if v:count == 0
                    \|     execute 'normal gT'
                    \| elseif v:count > tabpagenr('$')
                    \|     tabmove
                    \| elseif v:count >= tabpagenr()
                    \|     execute 'tabmove' v:count
                    \| elseif v:count < tabpagenr()
                    \|     execute 'tabmove' v:count - 1
                    \| endif
                    \| <cr>

" switch to the next tab page
nnoremap <c-n> gt
" switch to the previous tab page
nnoremap <c-p> gT

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark c ~/.vifm/
mark h ~/
mark t ~/tmp/
mark V ~/.vim/bundle/

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! reload :write | restart

" ------------------------------------------------------------------------------
" *.o - object files
" *.lo - object files for shared libs
" *.d - dependency file generated by compiler (also source file in D)
" *.class - JVM byte code
" *.pyc - Python byte code
" *.pyo - optimized Python byte code
" *.meta - magnet-link file for torrents
" .*~ - temporary files
" $RECYCLE.BIN - trash bin on Windows volumes
filter! /^.*\.(lo|o|d|class|py[co]|meta)$|.*~$|^\$RECYCLE\.BIN\/$/

if $VIFMRC_HAS_RICH_FONT
    " file types
    set classify=' :dir:/, :exe:, :reg:, :link:'
    " various file names
    set classify+=' ::../::, ::*.sh::, ::*.[hc]pp,,*.cc,,*.hh::, ::*.[hc]::'
    set classify+=' ::/^copying|license$/::, ::.git/,,*.git/::/'
    set classify+=' ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::'
    set classify+=' ::*.htm,,*.html,,**.[sx]html,,*.xml::'
    " archives
    set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,
                  \*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,
                  \*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,
                  \*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::'
    " images
    set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,
                  \*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,
                  \*.xwd::'
    " audio
    set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,
                  \*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,
                  \*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
    " media
    set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,
                  \*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,
                  \*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid,,*.webm::'
    " office files
    set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::'
    set classify+=' ::*.pptx,,*.ppt::'
endif

" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros like %f, %F, %d, %D may be used in the commands.
" Spaces in an app name will have to be escaped e.g. QuickTime\ Player.app
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf
filetype *.pdf
       \ {Open in Preview}
       \ open -a Preview.app,
       \ {Open in Skim}
       \ open -a Skim.app,
fileviewer *.pdf pdftotext -nopgbrk %c -

" PostScript
filetype *.ps,*.eps open -a Preview.app

" Djvu
filetype *.djvu open -a MacDjView.app

" Audio
filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       \ {Play using MPlayerX}
       \ open -a MPlayerX.app,
       \ {Open in iTunes}
       \ open -a iTunes.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
fileviewer *.mp3 mp3info
fileviewer *.flac soxi

" Video
filetype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
        \*.as[fx]
       \ {Open in VLC}
       \ open -a VLC.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
       \ {Open in MPlayerX}
       \ open -a MPlayerX.app,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          \*.as[fx]
         \ ffprobe -pretty %c 2>&1

" Web
filetype *.html,*.htm
       \ {Open in Safari}
       \ open -a Safari.app,
       \ {Open in Firefox}
       \ open -a Firefox.app,
       \ {Open in Chrome}
       \ open -a Google\ Chrome.app,
       \ {Open in vim}
       \ vim,
fileviewer *.html,*.htm w3m -dump -T text/html

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b

" Image
filetype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,
       \ open -a Preview.app,
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         \ identify %f

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" Torrent
filetype *.torrent open -a Transmission.app
fileviewer *.torrent dumptorrent -v %c

" Extract zip files
filetype *.zip unzip %f
fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c

" Extract tar archives
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -xf %f
fileviewer *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Mount .dmg archives
filetype *.dmg open

" Mount disk .img
filetype *.img open

" Open .pkg binaries
filetype *.pkg open

" Office files
filetype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt open -a LibreOffice.app
fileviewer *.doc antiword -
fileviewer *.docx docx2txt.pl %f -

"code
"fileviewer *.js,*.zsh,*.vim*,*.go,*.c,*.cc,*.s,*.S,*.java open -a CotEditor.app
""fileviewer *.js,*.zsh,*.vim*,*.go,*.c,*.cc,*.s,*.S,*.java highlight %c

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" Noted that in Linux highligh, there is no --base16 flag, change it to -s
" olive or some theme that's suitable.
"highlight --list-scripts=langs to see supported syntax
fileviewer *.go highlight -O xterm256 --base16 %c
fileviewer *.md highlight -O xterm256 --base16 --syntax md %c
fileviewer *.js,.hyper.js highlight -O xterm256 --base16 --syntax js %c
fileviewer *.ts highlight -O xterm256 --base16 --syntax ts %c
fileviewer .zshrc,.zshrc.pre-oh-my-zsh,.vim* highlight -O xterm256 --base16 --syntax sh %c
fileviewer *.zsh,*.bash*,*.vim*,*.fish* highlight -O xterm256 --base16 --syntax sh %c
fileviewer *.cc,*.[ch],*.[ch]pp highlight -O xterm256 --base16 --syntax c %c
fileviewer Makefile,Makefile.* highlight -O xterm256 --base16 --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" Displaying pictures in terminal
"
" fileviewer *.jpg,*.png shellpic %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  By default all unknown files are opened with 'vi[x]cmd'
" uncommenting one of lines below will result in ignoring 'vi[x]cmd' option
" for unknown file types.
" For OS X:
" filetype * open

" ------------------------------------------------------------------------------
" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH
" Block particular shortcut
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
" let $VIFM_SERVER_NAME = v:servername
