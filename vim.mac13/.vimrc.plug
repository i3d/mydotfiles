let $MYVIMRC = "$HOME/.vimrc"
if $NOTRUECOLOR
	set notermguicolors
else 
	set termguicolors
endif
" Disable not used builtin plugins
lua <<EOF
local disabled_built_ins = {
  "netrw",
  "netrwPlugin",
  "netrwSettings",
  "netrwFileHandlers",
  "gzip",
  "zip",
  "zipPlugin",
  "tar",
  "tarPlugin",
  "getscript",
  "getscriptPlugin",
  "vimball",
  "vimballPlugin",
  "2html_plugin",
  "logipat",
  "rrhelper",
  "spellfile_plugin",
  "matchit"
}
for _, plugin in pairs(disabled_built_ins) do
  vim.g["loaded_" .. plugin] = 1
end
EOF
" ####### Before any plugsin #######
lua require('impatient')
" ####### Before any plugsin #######
"""""""""""""""""""""""""""""""""""""""""""""""
"https://github.com/ChristianChiarulli/nvim
"""""""""""""""""""""""""""""""""""""""""""""""
" To get mach2 installed and all the goodies for neovim.
"
"
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
" auto-install vim-plug
" For neovim
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
"For vim
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
call plug#begin('~/.vim/plugged')
" ====== MUST HAVE ===== "
if fnamemodify(resolve(expand('%:p')), ':h') !~ 'google3'
  " Plug 'fatih/vim-go' " with  CiderLSP, it surrpassed  vim-go's functionality.
endif
Plug 'i3d/vim-jimbothemes'
Plug 'mhinz/vim-signify' " this is copied over.
Plug 'liuchengxu/vim-which-key'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
au! FileType * let g:coc_suggest_disable = 1
Plug 'voldikss/vim-floaterm'  " can't load lazily.
set shell=/bin/zsh
let g:floaterm_wintype="floating"
let g:floaterm_gitcommit='floaterm'
let g:floaterm_autoinsert=1
let g:floaterm_width=0.5
let g:floaterm_height=0.5
let g:floaterm_wintitle=0
let g:floaterm_position="bottomright"
let g:floaterm_autoclose=1
function s:floatermSettings()
    setlocal number
    " more settings
endfunction
autocmd FileType floaterm call s:floatermSettings()
autocmd User Startified setlocal buflisted
Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'
Plug 'zhaocai/GoldenView.Vim'
let g:goldenview__enable_at_startup = 1
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-treesitter/nvim-treesitter-textobjects'
Plug 'RRethy/nvim-treesitter-textsubjects'
Plug 'nvim-treesitter/nvim-treesitter-refactor'
Plug 'neovim/nvim-lspconfig'
Plug 'kabouzeid/nvim-lspinstall'
Plug 'nvim-lua/lsp_extensions.nvim'
Plug 'ray-x/lsp_signature.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'nvim-telescope/telescope-fzy-native.nvim'
Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
Plug 'gelguy/wilder.nvim'
let g:vista_update_on_text_changed = 1
let g:vista_stay_on_open = 0  " don't focus on it by default.
let g:vista_keep_fzf_colors = 1
let g:vista_sidebar_width = 20
let g:vista_sidebar_position = 'vertical topleft'
Plug 'liuchengxu/vista.vim'
function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
au VimEnter * call vista#RunForNearestMethodOrFunction()
Plug 'haringsrob/nvim_context_vt'
let g:session_directory = '~/.vim/sessions'
"let g:session_autoload = 'yes'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 1
let g:session_autosave_silent = 1
let g:session_default_to_last = 1
let g:session_command_aliases = 1
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'windwp/nvim-autopairs'
Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}
" ====== MUST HAVE ===== "
" ====== NICE HAVE ===== "
Plug 'markonm/traces.vim'
Plug 'lukas-reineke/indent-blankline.nvim'
let g:indent_blankline_char_list = ['|', '¦', '┆', '┊']
let g:indent_blankline_char_highlight_list = ['Error', 'Function']
let g:indent_blankline_space_char_highlight_list = ['Error', 'Function']
let g:indent_blankline_use_treesitter = v:true
let g:indent_blankline_show_current_context = v:true
let g:indent_blankline_context_highlight_list = ['Error', 'Warning']
Plug 'phaazon/hop.nvim'
nno S :HopPattern<cr>
Plug 'RRethy/vim-illuminate'
let g:Illuminate_ftblacklist = ['nerdtree']
augroup illuminate_augroup
  autocmd!
  autocmd VimEnter * hi illuminatedCurWord cterm=italic gui=italic
augroup END
Plug 'lfv89/vim-interestingwords'
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = -1
Plug 'ryanoasis/vim-devicons'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'tversteeg/registers.nvim'
Plug 'ms-jpq/coq_nvim'
Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts', 'on': 'COQnow'}
Plug 'lewis6991/gitsigns.nvim'
Plug 'vifm/vifm.vim'
" ====== NICE HAVE ===== "
" ====== OK HAVE ===== "
Plug 'roosta/fzfolds.vim'
Plug 'onsails/lspkind-nvim'
Plug 'nvim-treesitter/playground', { 'on': 'TSPlaygroundToggle' }
Plug 'Pocco81/TrueZen.nvim', {'on': 'TZFocus'}  " used only for max/restore window effect.
Plug 'folke/zen-mode.nvim' " another zen-mode
Plug 'folke/twilight.nvim' " dim unfocused code
Plug 'nacro90/numb.nvim'
Plug 'simrat39/rust-tools.nvim', { 'for': 'rust' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'ThePrimeagen/git-worktree.nvim'
Plug 'nvim-lua/completion-nvim'
imap <Tab> <Plug>(completion_smart_tab)
imap <S-Tab> <Plug>(completion_smart_s_tab)
Plug 'simrat39/symbols-outline.nvim'
Plug 'tpope/vim-surround'
Plug 'norcalli/nvim-colorizer.lua'
" ====== OK HAVE ===== "
" ====== PROBABLY OK HAVE ===== "
" Plug 'sso://user/mcdermottm/vim-csearch'
"""" OLD spf13 migrated """"
" Plug 'edkolev/tmuxline.vim', { 'on': 'Tmuxline' }
" Plug 'fnune/base16-vim'
" Plug 'tomtom/quickfixsigns_vim'
" Plug 'ayu-theme/ayu-vim' " or other package manager
" "termguicolors will affect the terminal color display.
" "set termguicolors     " enable true colors support
" "let ayucolor="light"  " for light version of theme
" "let ayucolor="mirage" " for mirage version of theme
" let ayucolor="dark"   " for dark version of theme
" Plug 'tpope/vim-fugitive'
" set statusline+=%{fugitive#statusline()} " Git Hotness
" Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeTabsOpen', 'NERDTreeTabsFind', 'NERDTreeFind' ] }
" Plug 'jistr/vim-nerdtree-tabs', { 'on': ['NERDTreeToggle', 'NERDTreeTabsOpen', 'NERDTreeTabsFind', 'NERDTreeFind' ] }
" Plug 'mbbill/undotree'
" """" OLD spf13 migrated """"
" Plug 'drewtempelmeyer/palenight.vim'
" Plug 'mhartington/oceanic-next'
" Plug 'Shougo/vimproc.vim', {'do' : 'make'}
" Plug 'dikiaap/minimalist'
" " for ciderlsp setup
let g:lsp_semantic_enabled = 0
let g:lsp_format_sync_timeout = 1000

""" " this is *very* cool!!! but this will make things really slow.
" Plug 'wellle/tmux-complete.vim'
""" " this is *very* cool!!! but this will make things really slow.

" " Keeping up to date with master
" Plug 'norcalli/nvim-colorizer.lua'
" Plug 'unblevable/quick-scope'
" " Trigger a highlight in the appropriate direction when pressing these keys:
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" highlight QuickScopePrimary guifg='#00FF87' gui=underline ctermfg=155 cterm=underline
" highlight QuickScopeSecondary guifg='#FFAF00' gui=underline ctermfg=81 cterm=underline
" let g:qs_max_chars=150
" Plug 'junegunn/rainbow_parentheses.vim'
" let g:rainbow#max_level = 16
" let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
" Plug 'ahmedkhalf/lsp-rooter.nvim'
" Plug 'alvan/vim-closetag'
" let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'
" let g:closetag_filetypes = 'html,xhtml,phtml,javascript'
" " use <c-w><c-w> to switch.
" Plug 'mhinz/vim-startify'
" Plug 'brooth/far.vim', { 'on': ['F', 'Farr', 'Far', 'Fardo'] }
" Plug 'AndrewRadev/linediff.vim', { 'on': 'Linediff' }
" Plug 'kshenoy/vim-signature'
" Plug 'wellle/targets.vim'
" Plug 'christoomey/vim-tmux-navigator'
" Plug 'benmills/vimux'
" " Plug 'tpope/vim-rhubarb', { 'on': 'GBrowse' }
" Plug 'junegunn/gv.vim'
" Plug 'skbolton/embark'
" " 3/7/2021
" Plug 'ulwlu/elly.vim'
" " 3/11/2021
" " 3/12/2021
" Plug 'b4skyx/serenade'
" " 4/6/2021
" " https://github.com/romgrk/barbar.nvim#install
" Plug 'romgrk/barbar.nvim'
" let bufferline = get(g:, 'bufferline', {})
" let bufferline.animation = v:true
" let bufferline.icon_separator_active = '▎'
" let bufferline.icon_separator_inactive = '▎'
" let bufferline.icon_close_tab = ''
" let bufferline.icon_close_tab_modified = '●'
" " 4/15/2021
" " post install (yarn install | npm install) then load plugin only for editing supported files
" " Since google3 vim already has codefmt for some of the filetypes, we will
" " exclude them here.
" Plug 'prettier/vim-prettier', {
"   \ 'do': 'yarn install',
"   \ 'for': ['css', 'less', 'scss', 'json', 'graphql', 'vue', 'yaml', 'html'] }
" " 4/19/2021
" " 4/23/2021
" Plug 'numtostr/FTerm.nvim', { 'on': 'toggle' }
" Plug 'nvim-lua/popup.nvim'
" Plug 'gruvbox-community/gruvbox'
" " 4/26/2021
" " Plug 'famiu/nvim-reload'
" " 4/30/2021 " the iPad Pro day
" Plug 'norcalli/nvim-colorizer.lua'
" " 5/3/2021
" Plug 'npxbr/glow.nvim', {'do': ':GlowInstall'}
" Plug 'folke/lsp-colors.nvim'
" " 6/18/2021
" Plug 'stsewd/fzf-checkout.vim'
" " 6/28/2021 (hotest day ever)
" 13/7/2021
" Plug 'tweekmonster/startuptime.vim'
" "Plug 'onsails/vimway-lsp-diag.nvim' " replace trouble? can't exit it?
" " 13/8/2021
" " Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary' , 'on': 'Clap'}
" " 14/8/2021
" " 19/8/2021
" " modern tagbar
" " 21/8/2021 easymotion + sneak
" ====== PROBABLY OK HAVE ===== "
" " ====== OLD OLD OLD ===== "
" " ===== from old spf13
" Plug 'fatih/vim-go'
" Plug 'edkolev/tmuxline.vim'
" Plug 'fnune/base16-vim'   " superset of above.
" Plug 'vim-scripts/mru.vim'
" Plug 'ayu-theme/ayu-vim' " or other package manager
" "set termguicolors     " enable true colors support
" let ayucolor="mirage" " for mirage version of theme
" "let ayucolor="dark"   " for dark version of theme
" Plug 'drewtempelmeyer/palenight.vim'
" Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeTabsOpen', 'NERDTreeTabsFind', 'NERDTreeFind' ] }
" Plug 'jistr/vim-nerdtree-tabs', { 'on': ['NERDTreeToggle', 'NERDTreeTabsOpen', 'NERDTreeTabsFind', 'NERDTreeFind' ] }
" Plug 'Xuyuanp/nerdtree-git-plugin'
" "Plug 'bling/vim-bufferline'
" Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-surround'
" " ===== from old spf13
" Plug 'edkolev/promptline.vim'
" Plug 'nikvdp/neomux'
" " imcompatible with zah's nim.vim plugin.
" Plug 'vifm/vifm.vim'
" " use homebrew version
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'junegunn/fzf.vim'
" Plug 'dikiaap/minimalist'
" Plug 'unblevable/quick-scope'
" " Trigger a highlight in the appropriate direction when pressing these keys:
" let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" highlight QuickScopePrimary guifg='#00FF87' gui=underline ctermfg=155 cterm=underline
" highlight QuickScopeSecondary guifg='#FFAF00' gui=underline ctermfg=81 cterm=underline
" let g:qs_max_chars=150
" Plug 'alvan/vim-closetag'
" let g:closetag_filenames = '*.html,*.xhtml,*.phtml'
" let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'
" let g:closetag_filetypes = 'html,xhtml,phtml,javascript'
" " use <c-w><c-w> to switch.
" Plug 'voldikss/vim-floaterm', { 'on': ['FloatermNew', 'FloatermToggle', 'FloatermHide'] }
" set shell=/bin/zsh
" let g:floaterm_wintype="floating"
" let g:floaterm_gitcommit='floaterm'
" let g:floaterm_autoinsert=1
" let g:floaterm_width=0.5
" let g:floaterm_height=0.5
" let g:floaterm_wintitle=0
" let g:floaterm_position="bottomright"
" let g:floaterm_autoclose=1
" function s:floatermSettings()
"     setlocal number
"     " more settings
" endfunction
" autocmd FileType floaterm call s:floatermSettings()
" autocmd User Startified setlocal buflisted
" Plug 'mhinz/vim-startify'
" let g:python3_host_prog = '$HOME/homebrew/bin/python3'
" Plug 'nightsense/vimspectr'
" Plug 'tpope/vim-rhubarb'
" Plug 'junegunn/gv.vim'
" Plug 'kevinhwang91/rnvimr', {'do': 'make sync', 'on': 'RnvimrToggle'}
" " Keeping up to date with master
" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
" Plug 'skywind3000/asynctasks.vim'
" Plug 'skywind3000/asyncrun.vim'
" Plug 'zhaocai/GoldenView.Vim'
" Plug 'machakann/vim-highlightedyank'
" let g:highlightedyank_highlight_duration = -1
" Plug 'pangloss/vim-javascript'
" let g:javascript_plugin_flow = 1
" Plug 'brooth/far.vim', {'on': ['F', 'Far', 'Farr', 'Fardo']}
" Plug 'RRethy/vim-illuminate'
" let g:Illuminate_ftblacklist = ['nerdtree']
" augroup illuminate_augroup
"   autocmd!
"   autocmd VimEnter * hi illuminatedCurWord cterm=italic gui=italic
" augroup END
" Plug 'lfv89/vim-interestingwords'
" Plug 'AndrewRadev/linediff.vim', {'on': 'Linediff'}
" Plug 'kshenoy/vim-signature'
" Plug 'wellle/targets.vim'
" Plug 'markonm/traces.vim'
" Plug 'christoomey/vim-tmux-navigator'
" Plug 'liuchengxu/vim-which-key'
" Plug 'mhinz/vim-signify'
" " 3/7/2021
" Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
" Plug 'nvim-treesitter/nvim-treesitter-textobjects'
" Plug 'RRethy/nvim-treesitter-textsubjects'
" Plug 'nvim-treesitter/nvim-treesitter-refactor'
" Plug 'ulwlu/elly.vim'
" " 3/12/2021
" Plug 'b4skyx/serenade'
" " 3/22/2021
" " 4/3/2021
" Plug 'i3d/vim-jimbothemes'
" " 4/6/2021
" " https://sharksforarms.dev/posts/neovim-rust/
" Plug 'neovim/nvim-lspconfig'
" Plug 'kabouzeid/nvim-lspinstall'
" Plug 'simrat39/rust-tools.nvim'
" Plug 'nvim-lua/lsp_extensions.nvim'
" Plug 'nvim-lua/completion-nvim'
" " Optional dependencies
" Plug 'nvim-lua/popup.nvim'
" Plug 'nvim-lua/plenary.nvim'
" Plug 'nvim-telescope/telescope.nvim'
" Plug 'nvim-telescope/telescope-fzf-native.nvim', { 'do': 'make' }
" Plug 'nacro90/numb.nvim'
" " 4/15/2021
" " post install (yarn install | npm install) then load plugin only for editing supported files
" Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" " 4/19/2021
" Plug 'kyazdani42/nvim-web-devicons'
" Plug 'ryanoasis/vim-devicons'
" " 4/23/2021 (AirTag day)
" Plug 'numtostr/FTerm.nvim'
" Plug 'gruvbox-community/gruvbox'
" " 4/26/2021
" Plug 'famiu/nvim-reload'
" " 4/30/2021 " the iPad Pro day
" Plug 'tversteeg/registers.nvim'
" Plug 'npxbr/glow.nvim', {'do': ':GlowInstall'}
" " 5/3/2021
" Plug 'folke/lsp-colors.nvim'
" Plug 'folke/lsp-trouble.nvim'
" " 6/4 2021
" Plug 'ahmedkhalf/lsp-rooter.nvim'
" " 6/22/2021  ==> looongest daytime.
" Plug 'ray-x/lsp_signature.nvim'
" " 6/27/2021 ===> Hoooooot!!! (45c)
" Plug 'Pocco81/TrueZen.nvim'
" " 7/6/2021
" " 13/7/2021
" Plug 'folke/zen-mode.nvim'   " another zen-mode
" Plug 'folke/twilight.nvim'   " dim unfocused code
" Plug 'tweekmonster/startuptime.vim'
" Plug 'onsails/vimway-lsp-diag.nvim'
" " 31/7/2021
" Plug 'gelguy/wilder.nvim'
" " 14/8/2021
" Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
" Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
" " 19/8/2021
" Plug 'lukas-reineke/indent-blankline.nvim'
" let g:indent_blankline_char_list = ['|', '¦', '┆', '┊']    
" let g:indent_blankline_char_highlight_list = ['Error', 'Function']    
" let g:indent_blankline_space_char_highlight_list = ['Error', 'Function']    
" let g:indent_blankline_use_treesitter = v:true    
" let g:indent_blankline_show_current_context = v:true    
" let g:indent_blankline_context_highlight_list = ['Error', 'Warning']  
" Plug 'lewis6991/gitsigns.nvim'
" " modern tagbar
" Plug 'liuchengxu/vista.vim'
" function! NearestMethodOrFunction() abort
"   return get(b:, 'vista_nearest_method_or_function', '')
" endfunction
" autocmd VimEnter * call vista#RunForNearestMethodOrFunction()
" " 21/8/2021 easymotion.
" Plug 'phaazon/hop.nvim'
" nno S :HopPattern<cr>
" Plug 'nvim-treesitter/playground'
" Plug 'glepnir/galaxyline.nvim' , {'branch': 'main'}
" Plug 'haringsrob/nvim_context_vt'
" Plug 'onsails/lspkind-nvim'
" Plug 'windwp/nvim-autopairs'
" let g:session_directory = '~/.vim/sessions'
" "let g:session_autoload = 'yes'
" let g:session_autosave = 'yes'
" let g:session_autosave_periodic = 1
" let g:session_autosave_silent = 1
" let g:session_default_to_last = 1
" let g:session_command_aliases = 1
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-session'
" " ====== OLD OLD OLD ===== "
" ================== PLUG END ====================== "
call plug#end()
" Automatically install missing plugins on startup
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif
" ============================== FZF ===============================
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'return': 'vsplit',}
" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_buffers_jump = 1
" map <C-f> :Files<CR>
" map <leader>b :Buffers<CR>
" nnoremap <leader>g :Rg<CR>
" nnoremap <leader>t :Tags<CR>
" nnoremap <leader>m :Marks<CR>
let g:fzf_tags_command = 'ctags -R'
" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }
"let $FZF_DEFAULT_OPTS = '--layout=reverse --inline-info --color=bg+:#3B4346,bg:#2A2F33,gutter:#2A2F33,spinner:#c1bf89,hl:#C76767,fg:#bfddb2,header:#CC9361,info:#87c095,pointer:#82abbc,marker:#c1bf89,fg+:#D49864,prompt:#e5a46b,hl+:#87c095 --header-lines=0 --ansi --keep-right'
" matrix theme
let $FZF_DEFAULT_OPTS = '--layout=reverse --inline-info --color=bg+:#18282e,bg:#091013,gutter:#6fa64c,spinner:#e2e500,hl:#e2e500,fg:#90d762,header:#46d8b8,info:#90d762,pointer:#90d762,marker:#00ff87,fg+:#00ff87,prompt:#00cd6d,hl+:#90d762 --header-lines=0 --keep-right'
let $FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git/**'"
"-g '!{node_modules,.git}'
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] 
  \ }
"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse', '--inline-info']}), <bang>0)
" Get text in files with Rg
" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   "rg --column --line-number --no-heading --color=always --smart-case --glob '!.git/**' ".shellescape(<q-args>), 1,
 " Make Ripgrep ONLY search file contents and not filenames
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --smart-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4.. -e'}, 'right:50%', '?'),
  \   <bang>0)
" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction
command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)
" ============================== FZF ===============================
luafile ~/.vim/init.lua
