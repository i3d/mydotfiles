# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=10000000
SAVEHIST=10000000

# chars as part of filename
WORDCHARS='*?_-[]~=&;!#$%^(){}<>'

### autoload -Uz compinit
### compinit

# Disable core dump
limit coredumpsize 0

zstyle ':completion:*' completer _oldlist _expand _complete _ignored _match _correct _approximate _prefix

zstyle ':completion:*' expand 'yes'
zstyle ':completion::complete:*' '\\'
zstyle ':completion:*' expand prefix suffix

# Will do autofirst match and menu complete
#zstyle ':completion:*:*:*:default' menu yes select
#
# will do list by the last modification time.
zstyle ':completion:*' file-sort modification

# this provent the auto cd subdir working.
#zstyle ':completion:*:*:default' force-list always

# GNU Colors
[ -f /etc/DIR_COLORS ] && eval $(dircolors -b /etc/DIR_COLORS)
export ZLSCOLORS="${LS_COLORS}"
zmodload zsh/complist
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31' 

zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true

zstyle ':completion:*' matcher-list '' '' '' 'r:|[._-]=** r:|=** l:|=*'
zstyle ':completion:*' max-errors 3 numeric

zstyle ':completion:*' menu select=0
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' special-dirs true
# do not squeeze-slashes
# zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' use-compctl true

# New stuff
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
zstyle ':completion:*:cd:*' ignored-patterns '(*/)#CVS'
zstyle ':completion:*:cd:*' ignored-patterns parent pwd
zstyle ':completion:*:match:*' original only
zstyle ':completion:*:approximate:*' max-errors 1 numeric
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*'   force-list always

zstyle ':completion::prefix-1:*' completer _complete
zstyle ':completion:predict:*' completer _complete
zstyle ':completion:incremental:*' completer _complete _correct

zstyle ':completion:*:processes' command 'ps -au$USER'

# Group matches and Describe
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:descriptions' format $'\e[01;33m -- %d --\e[0m'
zstyle ':completion:*:messages' format $'\e[01;35m -- %d --\e[0m'
zstyle ':completion:*:warnings' format $'\e[01;31m -- No Matches Found --\e[0m'
# cd dir color red
zstyle ':completion:*:default' list-colors ''
########## experiment ###############
zstyle ':completion:*:*:*:*:*' menu select
expand-or-complete-with-dots() {      # This bunch of code displays red dots when autocompleting
  echo -n "\e[31m......\e[0m"         # a command with the tab key, "Oh-my-zsh"-style.
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots
########## experiment ###############

rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

compctl -o setopt unsetopt
setopt aliases appendhistory autocd extendedglob notify completeinword listambiguous autolist complete_aliases no_list_beep list_packed bang_hist extended_history hist_reduce_blanks hist_verify inc_append_history no_clobber correct INTERACTIVE_COMMENTS path_dirs no_check_jobs no_hup share_history auto_name_dirs markdirs globsubst listpacked shwordsplit
unsetopt beep nomatch
bindkey -v
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/yongjian/.zshrc'

### autoload -U compinit
### compinit

### autoload -U promptinit
### promptinit
#prompt clint
### prompt fire
#
#prompt kerbaugh
#prompt elite2
#prompt elite
#prompt bart
#
#zmodload zsh/complist

# screen key binding
# ctrl-a :sessionname to find out the current session
screen_kill() {
  screen -X -S $1 kill
}

trr() {
  tmux -2 attach-session -t $1 || tmux ls
}

tmux_has_main() {
  tmux -2 has-session -t main
}

tmux_init_main() {
  tmux -2 new-session -d -s main -n $1
}

screenup (){
  # echo "Checking LOAS status..."
  # prodcertstatus --check_remaining_hours=9 || prodaccess --ssh_cert -g
  echo "Starting tmux..."
  tmux_has_main || tmux_init_main $1
  tmux -2 attach-session -t main
}

rsc() {
  CLIENTID=$1.`date +%S`
  tmux new-session -d -t $1 -s $CLIENTID
  tmux attach-session -t $CLIENTID
}

tt() {
  tmux new-session -d -s $1
  rsc $1
}

#######
# https://github.com/mooz/percol
function peco-src () {
    local selected_dir=$(ghq list --full-path | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}
zle -N peco-src

function peco-godoc() {
    local selected_dir=$(ghq list --full-path | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="godoc ${selected_dir} | less"
        zle accept-line
    fi
    zle clear-screen
}
zle -N peco-godoc

function ppgrep() {
    if [[ $1 == "" ]]; then
        PERCOL=peco
    else
        PERCOL="peco --query $1"
    fi
    ps aux | eval $PERCOL | awk '{ print $2 }'
}

function ppkill() {
    if [[ $1 =~ "^-" ]]; then
        QUERY=""            # options only
    else
        QUERY=$1            # with a query
        [[ $# > 0 ]] && shift
    fi
    ppgrep $QUERY | xargs kill $*
}

function exists { which $1 &> /dev/null }

if exists peco; then
    function peco_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | peco --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }
    zle -N peco_select_history
    bindkey '^R' peco_select_history
fi


alias dstat='dstat -cdlmnpsy'
#alias sl='screen -ls'
alias tl='tmux ls'
alias tlc='tmux lsc'
alias tc='tmux list-commands'
alias tw='tmux list-windows -t'
alias sr='screen -UraAd'
alias tk='tmux kill-session -t'
alias srx='screen -UraAdx'
alias srr='screen -UaADRR'
alias sk='screen_kill'
alias s='echo $STY'

alias sdg='screen -c /home/jimxu/.screenrc-go -d -m -UaA -S go'
alias sg='screen -c /home/jimxu/.screenrc-go -UaA -S go'
alias sde='screen -c /home/jimxu/.screenrc-everything -d -m -UaA -S everything'
alias se='screen -c /home/jimxu/.screenrc-everything -UaA -S everything'
alias sdc='screen -c /home/jimxu/.screenrc-compile -d -m -UaA -S compile'
alias sc='screen -c /home/jimxu/.screenrc-compile -UaA -S compile'
alias sdj='screen -c /home/jimxu/.screenrc-jotspot -d -m -UaA -S jotspot'
alias sj='screen -c /home/jimxu/.screenrc-jotspot -UaA -S jotspot'
alias sdb='screen -c /home/jimxu/.screenrc-borg -d -m -UaA -S borg'
alias sb='screen -c /home/jimxu/.screenrc-borg -UaA -S borg'

alias cdgocode='cd ~/go_code/src/'
alias vless='vi -u /usr/share/vim/vim80/macros/less.vim'
alias ls='ls -trABipFG'
alias l='ls -trABlipF'
#alias s='cd ..'
alias md='mkdir -p'
#alias grep='grep --color=always'
alias info_cal='ssh caladmin exec /etc/cron.d/scripts/add_events2 --info-calendars'
alias dump_group='ssh caladmin /usr/local/bin/list_domain_calendars.par --calendar_type group'
alias dump_user='ssh caladmin /usr/local/bin/list_domain_calendars.par --calendar_type user'
alias dump_res='ssh caladmin /usr/local/bin/list_domain_calendars.par --calendar_type resource'
alias cdcorpcron='cd /home/build/ops/corp/slack/roles/caladmin/files.cron/etc/cron.d/scripts'
alias ss='cd ../../'
alias srcup='srcfs sync'
alias g4p='g4 p'
alias g4s='g4 submit'
alias g4c='g4 change'
alias openglibc='w3m http://www.gnu.org/software/libc/manual/html_mono/libc.html#toc_Top'
alias openman='w3m http://linux.die.net/man/'
alias openman1='w3m http://linux.die.net/man/1/'
alias openman2='w3m http://www.kernel.org/doc/man-pages/index.html'
alias openman3='w3m http://linux.die.net/man/3/'
alias openman4='w3m http://linux.die.net/man/4/'
alias openman5='w3m http://linux.die.net/man/5/'
alias openman6='w3m http://linux.die.net/man/6/'
alias openman7='w3m http://linux.die.net/man/7/'
alias openman8='w3m http://linux.die.net/man/8/'
alias openmanl='w3m http://linux.die.net/man/l/'
alias openmann='w3m http://linux.die.net/man/n/'
alias opengdb='w3m http://sourceware.org/gdb/current/onlinedocs/gdb/'
alias opensyscall='w3m http://www.win.tue.nl/~aeb/linux/lk/lk-4.html'
alias opensyscalls='w3m http://www.kernel.org/doc/man-pages/online/pages/man2/syscalls.2.html'
alias openautoconf='w3m http://www.gnu.org/software/autoconf/manual/autoconf.html'
alias openautomake='w3m http://sources.redhat.com/automake/automake.html'
alias opengcc='w3m http://www.network-theory.co.uk/docs/gccintro/index.html'
alias opengccman='w3m http://gcc.gnu.org/onlinedocs/'
alias opencstd='w3m http://c0x.coding-guidelines.com/index.html'
alias opencfaq='w3m http://c-faq.com/questions.html'
alias opencplusfaq='w3m http://www.parashift.com/c++-faq-lite/'
alias openccfaq='w3m http://www2.research.att.com/~bs/bs_faq2.html#void-main'
alias opencheaders='w3m http://en.wikipedia.org/wiki/Category:C_standard_library_headers'
alias opencposix='w3m http://en.wikipedia.org/wiki/C_POSIX_library'
alias opensus4='w3m http://pubs.opengroup.org/onlinepubs/9699919799/mindex.html'
alias openw3m='w3m http://w3m.sourceforge.net/MANUAL'

#. /sw/bin/init.sh

#
#
#
#
#
#
#
#
#
#
#
# End of lines added by compinstall
export EDITOR=vim
export GFS_CLIENT_SECURITY_LEVEL=integrity
#`keval `ssh-agent -s` 2>/dev/null 1>/dev/null && ssh-add 2>&1 >/dev/null
[[ "$(type -p java)" =~ /usr/local/buildtools/java ]] || export PATH="/usr/local/buildtools/java/jdk/bin:$PATH"
export P4CONFIG=.p4config
export P4MERGE=/home/build/public/eng/perforce/mergep4.tcl
export P4EDITOR=$EDITOR
#export P4PORT=perforce6:6666
export BASE=/home/jimxu/src
#eval $(ssh-agent|head -2) #|| ssh-add
#ssh-add $HOME/.ssh/chromium
#~/usr/local/bin/kinitme
#history -na
#export JAVA_HOME=/usr/lib/jvm/java-1.5.0-sun/jre
export JDK_HOME=/home/jimxu/pkgs/jdk1.6.0_12_32
if [ -x  /usr/local/scripts/ssx-agents ]; then
  eval $(/usr/local/scripts/ssx-agents $SHELL)
fi
export PRODACCESS="prodaccess --ssh_cert"
export P4DIFF=diff
# ([[ ! -d /var/tmp/loas-jimxu ]] || [[ ! -f /var/tmp/loas-jimxu/pid ]]) && ~/bin/setup-corp-loasd.sh -q
export SVN_EDITOR=vim
#export GEM_HOME=/usr/lib/ruby/gems/1.8

## docker
export DOCKER_HOST=tcp://localhost:4243


# don't set p4 port in mac remote laptop.
function cd() {
  builtin cd "$@" && ls
}

# for mac only
function pman() {
    man -t "${1}" | open -f -a /Applications/Preview.app
}

unset http_proxy
#export GOROOT=$HOME/go
#export GOARCH=386
#export GOOS=darwin
#export GOBIN=$HOME/bin
export GOPATH=$HOME/go_code


export PATH=$HOME/bin:$GOPATH/bin:/usr/local/symlinks:/usr/local/scripts:$PATH:$HOME/pkgs/android-sdk-linux_x86-1.5_r3/tools
export PATH=$PATH:$HOME/src/depot_tools

export G4INHIBITAUTOREVERT=1

if [[ $(hostname) =~ 'jimux.kir' ]]; then
  export LANG=C
fi

######## IRONKEY #####
export IRONKEY_MOUNT="/tmp/${USER}-ironkey"
export CREDENTIALS_DIR="${IRONKEY_MOUNT}/emergency-credentials"
export LOAS_KEY_PATH="${CREDENTIALS_DIR}/ssl_server_key.pem"
export LOAS_CERT_PATH="${CREDENTIALS_DIR}/ssl_server_cert.pem"
export SSH_KEY_PATH="${CREDENTIALS_DIR}/identity"
export SSH_ADD="ssh-add-prod"


######## GO
# gc
prefixes=(5 6 8)
for p in $prefixes; do
  compctl -g "*.${p}" ${p}l
  compctl -g "*.go" ${p}g
done
#
# standard go tools
compctl -g "*.go" gofmt

# gccgo
compctl -g "*.go" gccgo
#

# &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
# prompt

#function precmd {
#
#    local TERMWIDTH
#    (( TERMWIDTH = ${COLUMNS} - 1 ))
#
#    ###
#    # Truncate the path if it's too long.
#
#    PR_FILLBAR=""
#    PR_PWDLEN=""
#
#    local promptsize=${#${(%):---(%n@%m:%d %W %*)----}}
#    local pwdsize=${#${(%):-}}
#
#    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
#      ((PR_PWDLEN=$TERMWIDTH - $promptsize))
#    else
#      PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
#    fi
#
#    ###
#    # Get APM info.
#    # APM is disabled.
#    #if which ibam > /dev/null; then
#    #  PR_APM_RESULT=`ibam --percentbattery`
#    #elif which apm > /dev/null; then
#    #  PR_APM_RESULT=`apm`
#    #fi
#}
#
#preexec () {
#    if [[ "$TERM" == "screen" ]]; then
#      local CMD=${1[(wr)^(*=*|sudo|-*)]}
#      echo -n "\ek$CMD\e\\"
#    fi
#}
#
#setprompt () {
#    ###
#    # Need this so the prompt will work.
#
#    setopt prompt_subst
#
#    ###
#    # See if we can use colors.
#
#    autoload colors zsh/terminfo
#    if [[ "$terminfo[colors]" -ge 8 ]]; then
#      colors
#    fi
#
#    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
#      eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
#      eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
#      (( count = $count + 1 ))
#    done
#    PR_NO_COLOUR="%{$terminfo[sgr0]%}"
#
#    ###
#    # See if we can use extended characters to look nicer.
#
#    typeset -A altchar
#    set -A altchar ${(s..)terminfo[acsc]}
#    PR_SET_CHARSET="%{$terminfo[enacs]%}"
#    PR_SHIFT_IN="%{$terminfo[smacs]%}"
#    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
#    PR_HBAR=${altchar[q]:--}
#    PR_ULCORNER=${altchar[l]:--}
#    PR_LLCORNER=${altchar[m]:--}
#    PR_LRCORNER=${altchar[j]:--}
#    PR_URCORNER=${altchar[k]:--}
#
#    ###
#    # Decide if we need to set titlebar text.
#
#    case $TERM in
#    xterm*)
#        PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
#        ;;
#    screen)
#        PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
#        ;;
#    *)
#        PR_TITLEBAR=''
#        ;;
#    esac
#
#    ###
#    # Decide whether to set a screen title
#    if [[ "$TERM" == "screen" ]]; then
#      PR_STITLE=$'%{\ekzsh\e\\%}'
#    else
#      PR_STITLE=''
#    fi
#
#    ###
#    # APM detection
#
#    if which ibam > /dev/null; then
#      PR_APM='$PR_RED${${PR_APM_RESULT[(f)1]}[(w)-2]}%%(${${PR_APM_RESULT[(f)3]}[(w)-1]})$PR_LIGHT_BLUE:'
#    elif which apm > /dev/null; then
#      PR_APM='$PR_RED${PR_APM_RESULT[(w)5,(w)6]/\% /%%}$PR_LIGHT_BLUE:'
#    else
#      PR_APM=''
#    fi
#
#    ###
#    # Finally, the prompt.
#
#    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
#$PR_CYAN$PR_SHIFT_IN$PR_ULCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
#$PR_GREEN%(!.%SROOT%s.%n)$PR_BLUE@$PR_GREEN%m$PR_BLUE:$PR_MAGENTA%d $PR_YELLOW%W %*\
#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_HBAR${(e)PR_FILLBAR}\
#$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_URCORNER$PR_SHIFT_OUT\
#
#$PR_CYAN$PR_SHIFT_IN$PR_LLCORNER$PR_BLUE$PR_HBAR$PR_SHIFT_OUT(\
#%(?,$PR_LIGHT_GREEN%?,$PR_RED%?)\
#${(e)PR_APM}\
#$PR_LIGHT_BLUE:%(!.$PR_RED.$PR_WHITE)%#$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
#$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT ;-)\
#$PR_NO_COLOUR '
#
#    RPROMPT=' $PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_CYAN$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'
#
#    PS2='$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
#$PR_BLUE$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
#$PR_LIGHT_GREEN%_$PR_BLUE)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
#$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
#}
#
#setprompt
#
# export TBL=/bigtable/mix-ia/engedu-codelab.$USER
gdoc () {
    # tmpl_dir="$ZSH/plugins/gdoc/templates2" 
    # godoc --templates="$tmpl_dir" "$@" | highlight --syntax=go --out-format=ansi
    go doc --all "$@" | highlight --syntax=go --out-format=ansi
}

